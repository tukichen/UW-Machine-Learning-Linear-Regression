{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Regression Week 4: Ridge Regression (interpretation)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this notebook, we will run ridge regression multiple times with different L2 penalties to see which one produces the best fit. We will revisit the example of polynomial regression as a means to see the effect of L2 regularization. In particular, we will:\n",
    "* Use a pre-built implementation of regression (GraphLab Create) to run polynomial regression\n",
    "* Use matplotlib to visualize polynomial regressions\n",
    "* Use a pre-built implementation of regression (GraphLab Create) to run polynomial regression, this time with L2 penalty\n",
    "* Use matplotlib to visualize polynomial regressions under L2 regularization\n",
    "* Choose best L2 penalty using cross-validation.\n",
    "* Assess the final fit using test data.\n",
    "\n",
    "We will continue to use the House data from previous notebooks.  (In the next programming assignment for this module, you will implement your own ridge regression learning algorithm using gradient descent.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fire up graphlab create"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#import graphlab\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import sklearn\n",
    "from sklearn.linear_model import LinearRegression, Ridge, Lasso"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Polynomial regression, revisited"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We build on the material from Week 3, where we wrote the function to produce an SFrame with columns containing the powers of a given input. Copy and paste the function `polynomial_sframe` from Week 3:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def polynomial_sframe(feature, degree):\n",
    "    df = pd.DataFrame()\n",
    "    df['power_1'] = feature\n",
    "    if degree > 1:\n",
    "        for power in range(2, degree +1 ):\n",
    "            df['power_'+str(power)] = feature ** power\n",
    "            \n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's use matplotlib to visualize what a polynomial regression looks like on the house data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As in Week 3, we will use the sqft_living variable. For plotting purposes (connecting the dots), you'll need to sort by the values of sqft_living. For houses with identical square footage, we break the tie by their prices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#sales = graphlab.SFrame('kc_house_data.gl/')\n",
    "\n",
    "dtype_dict = {'bathrooms':float, 'waterfront':int, 'sqft_above':int, 'sqft_living15':float, 'grade':int, 'yr_renovated':int, 'price':float, 'bedrooms':float, 'zipcode':str, 'long':float, 'sqft_lot15':float, 'sqft_living':float, 'floors':float, 'condition':int, 'lat':float, 'date':str, 'sqft_basement':int, 'yr_built':int, 'id':str, 'sqft_lot':int, 'view':int}\n",
    "\n",
    "sales = pd.read_csv('kc_house_data.csv', dtype=dtype_dict)\n",
    "sales = sales.sort_values(['sqft_living','price'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us revisit the 15th-order polynomial model using the 'sqft_living' input. Generate polynomial features up to degree 15 using `polynomial_sframe()` and fit a model with these features. When fitting the model, use an L2 penalty of `1e-5`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "l2_small_penalty = 1.5e-5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: When we have so many features and so few data points, the solution can become highly numerically unstable, which can sometimes lead to strange unpredictable results.  Thus, rather than using no regularization, we will introduce a tiny amount of regularization (`l2_penalty=1e-5`) to make the solution numerically stable.  (In lecture, we discussed the fact that regularization can also help with numerical stability, and here we are seeing a practical example.)\n",
    "\n",
    "With the L2 penalty specified above, fit the model and print out the learned weights.\n",
    "\n",
    "Hint: make sure to add 'price' column to the new SFrame before calling `graphlab.linear_regression.create()`. Also, make sure GraphLab Create doesn't create its own validation set by using the option `validation_set=None` in this call."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ridge(alpha=1.5e-05, copy_X=True, fit_intercept=True, max_iter=None,\n",
       "   normalize=True, random_state=None, solver='auto', tol=0.001)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import linear_model\n",
    "import numpy as np\n",
    "\n",
    "poly15_data = polynomial_sframe(sales['sqft_living'], 15) # use equivalent of `polynomial_sframe`\n",
    "model = linear_model.Ridge(alpha=l2_small_penalty, normalize=True)\n",
    "model.fit(poly15_data, sales['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  1.24873306e+02,  -4.77376011e-02,   3.01446238e-05,\n",
       "        -2.44419942e-09,  -1.94153675e-13,   8.54085686e-18,\n",
       "         1.51142121e-21,   8.27979094e-26,   6.52603100e-31,\n",
       "        -3.27895017e-34,  -3.87962315e-38,  -2.72437650e-42,\n",
       "        -1.07790800e-46,   3.78242694e-51,   1.39790296e-54])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def fit_ridge(data, l2_penalty, deg=15 ):\n",
    "    X = polynomial_sframe(data['sqft_living'], deg)  \n",
    "    y = data['price']\n",
    "    model = linear_model.Ridge( alpha= l2_penalty, normalize=True)\n",
    "    model.fit(X, y)\n",
    "    print(model.intercept_, model.coef_)\n",
    "    plt.plot(X['power_1'], y , 'o',  X['power_1'], model.predict(X), '-')\n",
    "    return(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(220664.3750541443, array([  1.24873306e+02,  -4.77376011e-02,   3.01446238e-05,\n",
      "        -2.44419942e-09,  -1.94153675e-13,   8.54085686e-18,\n",
      "         1.51142121e-21,   8.27979094e-26,   6.52603100e-31,\n",
      "        -3.27895017e-34,  -3.87962315e-38,  -2.72437650e-42,\n",
      "        -1.07790800e-46,   3.78242694e-51,   1.39790296e-54]))\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nBFC+mIXdfQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10fbae250>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model= fit_ridge(data= sales, l2_penalty=1.5e-5, deg=15 )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***QUIZ QUESTION:  What's the learned value for the coefficient of feature `power_1`?***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Observe overfitting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Recall from Week 3 that the polynomial fit of degree 15 changed wildly whenever the data changed. In particular, when we split the sales data into four subsets and fit the model of degree 15, the result came out to be very different for each subset. The model had a *high variance*. We will see in a moment that ridge regression reduces such variance. But first, we must reproduce the experiment we did in Week 3."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, split the data into split the sales data into four subsets of roughly equal size and call them `set_1`, `set_2`, `set_3`, and `set_4`. Use `.random_split` function and make sure you set `seed=0`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#(semi_split1, semi_split2) = sales.random_split(.5,seed=0)\n",
    "#(set_1, set_2) = semi_split1.random_split(0.5, seed=0)\n",
    "#(set_3, set_4) = semi_split2.random_split(0.5, seed=0)\n",
    "\n",
    "# dtype_dict same as above\n",
    "set_1 = pd.read_csv('wk3_kc_house_set_1_data.csv', dtype=dtype_dict)\n",
    "set_2 = pd.read_csv('wk3_kc_house_set_2_data.csv', dtype=dtype_dict)\n",
    "set_3 = pd.read_csv('wk3_kc_house_set_3_data.csv', dtype=dtype_dict)\n",
    "set_4 = pd.read_csv('wk3_kc_house_set_4_data.csv', dtype=dtype_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, fit a 15th degree polynomial on `set_1`, `set_2`, `set_3`, and `set_4`, using 'sqft_living' to predict prices. Print the weights and make a plot of the resulting model.\n",
    "\n",
    "Hint: When calling `graphlab.linear_regression.create()`, use the same L2 penalty as before (i.e. `l2_small_penalty`).  Also, make sure GraphLab Create doesn't create its own validation set by using the option `validation_set = None` in this call."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "l2_small_penalty=1e-9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(227417.22904261632, array([  6.23857718e+01,   1.98235299e-02,   7.56558420e-06,\n",
      "        -5.91491377e-10,  -1.96217953e-14,   1.86865173e-16,\n",
      "        -6.62909386e-16,   2.79625958e-16,  -1.81062210e-16,\n",
      "        -1.24404650e-15,   2.30366670e-16,   5.06433875e-16,\n",
      "         2.25732230e-16,  -3.14308031e-16,  -3.32978688e-16]))\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZsAAAD8CAYAAAChHgmuAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3Xt8VNW58PHfM0PAQJUAUgoBBC3Faq0gqYC0Hi8V0Fah\n2nrre0Rri63aq6WFtkfU9hzp4X1ba/XYQ6tHtFZE1IC3phTtqaKIwYgIisbKbUBFIGAhQi7P+8de\nEybDzGRmMntmz+T5fj75ZGfty1qzk8wz67LXElXFGGOM8VOo0AUwxhhT+izYGGOM8Z0FG2OMMb6z\nYGOMMcZ3FmyMMcb4zoKNMcYY31mwMcYY4zsLNsYYY3yXVrARke+LyFoReVVE7heRw0RkuIi8ICL1\nIvKAiHR3x/ZwP9e7/cNirjPLpa8XkUkx6ZNdWr2IzIxJzzgPY4wxwSMdzSAgIpXAs8BxqtooIguB\nJ4BzgIdVdYGI/A5Yrap3iMjVwKdV9ZsicjHwJVW9SESOA+4HTgYGAX8FPuGyeQM4C9gCvAhcoqrr\nXF5p55HqdRx55JE6bNiwzO+QMcZ0YatWrXpfVft39jrdMjiuXESagJ7ANuAM4FK3fz5wA3AHMMVt\nAywCbhMRcekLVHU/8LaI1OMFHoB6Vf0HgIgsAKaIyGuZ5qEpIuewYcOora1N8+UaY4wBEJGNubhO\nh81oqhoB/i+wCS/I7AZWAQ2q2uwO2wJUuu1KYLM7t9kd3y82Pe6cZOn9ssijHRGZLiK1IlK7ffv2\njl6qMcYYn3QYbESkD15NYjhe81cvYLLP5coJVZ2nqlWqWtW/f6drgcYYY7KUzgCBzwNvq+p2VW0C\nHgYmABUiEm2GGwxE3HYEGALg9vcGdsSmx52TLH1HFnkYY4wJoHSCzSZgnIj0dH0vZwLrgKeBL7tj\npgGL3fYS9zNu/1OuL2UJcLEbSTYcGAGsxBsQMMKNPOsOXAwscedkmocxxpgA6nCAgKq+ICKLgJeA\nZqAOmAc8DiwQkV+4tDvdKXcC97oBADvxggequtaNLlvnrnONqrYAiMi1QA0QBu5S1bXuWj/OJA9j\njDHB1OHQ51JRVVWlNhrNGOO36roIc2vWs7WhkUEV5cyYNJKpoys7PjGgRGSVqlZ19jrpDn02xhjT\ngeq6CLMeXkNjUwsAkYZGZj28BqCoA04u2HQ1xhiTI3Nr1rcFmqjGphbm1qwvUImCw4KNMcbkyNaG\nxozSuxILNsYYkyODKsozSu9KLNgYY0yOzJg0kvKycLu08rIwMyaNLFCJgsMGCBhjTI5EBwGU0mi0\nXLFgY4wxOTR1dKUFlwSsGc0YY4zvLNgYY4zxnQUbY4wxvrNgY4wxxncWbIwxxvjOgo0xxhjfWbAx\nxhjjOws2xhhjfGfBxhhjjO8s2BhjjPFdh8FGREaKyMsxX3tE5Hsi0ldElorIm+57H3e8iMitIlIv\nIq+IyEkx15rmjn9TRKbFpI8RkTXunFtFRFx6xnkYY4wJng6DjaquV9VRqjoKGAPsAx4BZgLLVHUE\nsMz9DHA2MMJ9TQfuAC9wALOBscDJwOxo8HDHfCPmvMkuPaM8jDHGBFOmzWhnAm+p6kZgCjDfpc8H\nprrtKcA96lkBVIjIQGASsFRVd6rqLmApMNntO0JVV6iqAvfEXSuTPIwxxgRQpsHmYuB+tz1AVbe5\n7XeAAW67Etgcc84Wl5YqfUuC9GzyaEdEpotIrYjUbt++Pa0XaIwxJvfSDjYi0h04D3gwfp+rkWgO\ny3WIbPJQ1XmqWqWqVf379/epZMYYYzqSSc3mbOAlVX3X/fxutOnKfX/PpUeAITHnDXZpqdIHJ0jP\nJg9jjDEBlEmwuYSDTWgAS4DoiLJpwOKY9MvciLFxwG7XFFYDTBSRPm5gwESgxu3bIyLj3Ci0y+Ku\nlUkexhhjAiitlTpFpBdwFnBVTPIcYKGIXAlsBC506U8A5wD1eCPXrgBQ1Z0i8nPgRXfcTaq6021f\nDdwNlANPuq+M8zDGGBNM4nWFlL6qqiqtra0tdDGMMaaoiMgqVa3q7HVsBgFjjDG+s2BjjDHGdxZs\njDHG+M6CjTHGGN9ZsDHGGOM7CzbGGGN8Z8HGGGOM7yzYGGOM8Z0FG2OMMb6zYGOMMcZ3FmyMMcb4\nzoKNMcYY31mwMcYY4zsLNsYYY3xnwcYYY4zvLNgYY4zxnQUbY4wxvksr2IhIhYgsEpHXReQ1ERkv\nIn1FZKmIvOm+93HHiojcKiL1IvKKiJwUc51p7vg3RWRaTPoYEVnjzrlVRMSlZ5yHMcaY4Em3ZvMb\n4M+qeixwIvAaMBNYpqojgGXuZ4CzgRHuazpwB3iBA5gNjAVOBmZHg4c75hsx50126RnlYYwxJpg6\nDDYi0hs4FbgTQFUPqGoDMAWY7w6bD0x121OAe9SzAqgQkYHAJGCpqu5U1V3AUmCy23eEqq5QVQXu\nibtWJnkYY4wJoHRqNsOB7cD/iEidiPxBRHoBA1R1mzvmHWCA264ENsecv8WlpUrfkiCdLPJoR0Sm\ni0itiNRu3749jZdqjDHGD+kEm27AScAdqjoa2MvB5iwAXI1Ec1+8zuWhqvNUtUpVq/r37+9TyYwx\nxnQknWCzBdiiqi+4nxfhBZ93o01X7vt7bn8EGBJz/mCXlip9cIJ0ssjDGGNMAHUYbFT1HWCziIx0\nSWcC64AlQHRE2TRgsdteAlzmRoyNA3a7prAaYKKI9HEDAyYCNW7fHhEZ50ahXRZ3rUzyMMYYE0Dd\n0jzu28B9ItId+AdwBV6gWigiVwIbgQvdsU8A5wD1wD53LKq6U0R+DrzojrtJVXe67auBu4Fy4En3\nBTAnkzyMMcYEk3hdIaWvqqpKa2trC10MY4wpKiKySlWrOnsdm0HAGGOM7yzYGGOM8Z0FG2OMMb6z\nYGOMMcZ3FmyMMcb4zoKNMcYY31mwMcYY4zsLNsYYY3yX7gwCxpgiU10XYW7NerY2NDKoopwZk0Yy\ndfQhk6MbkxcWbIwpQdV1EWY9vIbGphYAIg2NzHp4DYAFHFMQ1oxmTAmaW7O+LdBENTa1MLdmfYFK\nZLo6CzbGlKCtDY0ZpRvjNws2xpSgQRXlGaUb4zcLNsaUoBmTRlJeFm6XVl4WZsakkUnOMMZfFmyM\nKUFTR1dywZhKwiIAhEW4YEylDQ4wBWPBxpgSVF0X4aFVEVrcelUtqjy0KkJ1na2ebgrDgo0xJchG\no5mgSSvYiMgGEVkjIi+LSK1L6ysiS0XkTfe9j0sXEblVROpF5BUROSnmOtPc8W+KyLSY9DHu+vXu\nXMk2D2OMjUYzwZNJzeZ0VR0VszzoTGCZqo4AlrmfAc4GRriv6cAd4AUOYDYwFjgZmB0NHu6Yb8Sc\nNzmbPIwxHhuNZoKmM81oU4D5bns+MDUm/R71rAAqRGQgMAlYqqo7VXUXsBSY7PYdoaorVFWBe+Ku\nlUkexhhsNJoJnnSDjQJ/EZFVIjLdpQ1Q1W1u+x1ggNuuBDbHnLvFpaVK35IgPZs82hGR6SJSKyK1\n27dvT+uFGlMKpo6u5ObzT6CyohwBKivKufn8E2w0mimYdOdG+6yqRkTko8BSEXk9dqeqqoho7ovX\nuTxUdR4wD6CqqsrX8hkTNFNH21BnExxp1WxUNeK+vwc8gtfn8m606cp9f88dHgGGxJw+2KWlSh+c\nIJ0s8jDGGBNAHQYbEeklIodHt4GJwKvAEiA6omwasNhtLwEucyPGxgG7XVNYDTBRRPq4gQETgRq3\nb4+IjHOj0C6Lu1YmeRhjjAmgdJrRBgCPuNHI3YA/qeqfReRFYKGIXAlsBC50xz8BnAPUA/uAKwBU\ndaeI/Bx40R13k6rudNtXA3cD5cCT7gtgTiZ5GGOMCSZR7RpdGVVVVVpbW1voYhhjTFERkVUxj7xk\nzWYQMMaYXGppgi2rYMdbhS5JoNhKncYY0xnNB2DrS7DhWdi4HDa9AE17IVQGZ90E474FbkLUrsyC\njTHGZKLpQ9jyohdYNjzrbTd/6O376HEw6lI4ajyseQhqZnnHTbkNyvukvm6Js2BjjDGpHNgLm1e6\n4LIcIrXQcgAQ+NgJUPU1OGoCDB0PvfodPO/482HFHbD03+C/T4Uv3w2DxxTqVRScBRtjfFJdF2Fu\nzXq2NjQyqKKcGZNG2kOWxeDDPbD5hYPNYlvroLUZJAwDT4SxV8FRn4Wh46C8Ivl1RGD81TDkZHjw\nCrhrEkz8OYz9ZpdsVrNgY4wPqusizHp4Tds0/5GGRmY9vAbAAk7QNO6CTSsOBpdtq0FbvT6XypPg\nlO/AsAkwZCz0ODzz6w+ugqv+FxZfA3+e6eUz5fbUgaoE2dBnY3wwYc5TRBJM519ZUc7ymWcUoESm\nzd4dXlCJNou9+yqgEO7hBYajJnjBZfDJ0L1n7vJVhRX/BUuvhyMq4Sv/A5XBb1bL1dBnq9kY4wNb\nTyZAPngXNj4LG5/zgsv217z0buVeE9fpP/ECTOUYKDvMv3KIwPhrvCC26Aq4cxJM+nc4eXqXaFaz\nYGOMDwZVlCes2dh6MnmwO3JwpNjG5bCj3kvv/hGvKezTX/H6XAaNhm7d81++IZ+Bq/4O1VfDkz+C\nDc/AebeVfLOaBRtjfDBj0sh2fTZg68n4QhUaNno1lo3PeTWYXRu8fT16e0OQT5rm1VwGngjhgLzl\n9ewLl9wPz98Of53tjVb7yt1eH1GJCsidN6a0RAcB2Gi0HFOFnf84WGvZsBz2uOWwyvt4QeXkq7w+\nlwGfglA49fUKSQROufbgaLU7J5Z0s5oNEDDGBJcqbF/v1ViitZd/vuPt69XfdeZ/1vve/1gIFekM\nXPt2QvW34I0/wyfP8x4CPax3oUsF2AABY0wpam2F99bF9Lk8B/ve9/YdPtALLMMmeH0uR44onRpA\nz75w8f3w/G3w1xvgnVe8ZrVBowtdspyxYGOMKZzWFu+NdYMbirzxOfiwwdvXeyiMOMurtRx1CvQ9\nunSCSyKhEEz4jjeIYdHXXLPaf8Bnvl4Sr9uCjTEmf1qaYOvLB59z2bQC9u/x9vUZDp/8oldrGTYB\nKoYWtqyFMnQsfPMZeOSb8MQP3Wi13wamWS1bFmyMMf5p3g+Rlw72uWxe6c2IDHDkJ+BTF7g+l1Pg\niEGFLWuQ9OwLlyyA538Lf73Rm9XgK/Nh0KhClyxrFmyMMbnT1OjNghxtFks0I/KwCV7T2Ec+Wtiy\nBl0oBBO+G9OsdlZRN6ulHWxEJAzUAhFV/aKIDAcWAP2AVcC/quoBEekB3AOMAXYAF6nqBneNWcCV\nQAvwHVWtcemTgd8AYeAPqjrHpWechzEmjw7sdZNWuuASWZXejMgmfUPHwVXPQLVrVtu4HM69FQ47\notAly0gmNZvvAq8B0Vf4S+DXqrpARH6HF0TucN93qerHReRid9xFInIccDFwPDAI+KuIfMJd63bg\nLGAL8KKILFHVdZnmkeU9MMak68M9Xj9LdPqXbGdENpnp1Q8ueQCeuxWW3eT1e10437vnRSKt52xE\nZDAwH/h34AfAucB24GOq2iwi44EbVHWSiNS47edFpBvwDtAfmAmgqje7a9YAN7gsblDVSS59lkub\nk2kemuLF2HM2xmShcRdsfP7gUOR3Xmk/I3J00spsZ0Q2mdu0wnsIdN/7MPlmqLrS12a1fD9ncwvw\nIyD619QPaFDVZvfzFiD6aHQlsBnABYnd7vhKYEXMNWPP2RyXPjbLPN6PLbSITAemAwwd2kVHthiT\nDVVYOQ/+8jOvWSw6I/LnfujPjMgmfUPHwTefhUemw+PXeR8CiqBZrcNgIyJfBN5T1VUicpr/Rcod\nVZ0HzAOvZlPg4hhTHD7cDYuvhdeWwIhJ3rMflVX+zohsMtOrH1z6ICy/BZ76hRutdnegm9XSqdlM\nAM4TkXOAw/D6bH4DVIhIN1fzGAxE3PERYAiwxTVx9cbrxI+mR8Wekyh9RxZ5GFN0ArWi59Y6ePBy\naNgMZ/0cxl9bvFPAlLpQCD73A6+ms+hK+MNZrlnta4EcrdbhX5GqzlLVwao6DK+D/ylV/SrwNPBl\nd9g0YLHbXuJ+xu1/yvWlLAEuFpEebpTZCGAl8CIwQkSGi0h3l8cSd06meRhTVKIrekYaGlEOruhZ\nXRfp8NycUoUX5nlPrbc0wxVPejUaCzTBd9Qp3kOgwz8Hj/8AHrrSG8gRMJ35S/ox8AMRqcfrL7nT\npd8J9HPpP+DgwIC1wEJgHfBn4BpVbXG1lmuBGrzRbgvdsRnnYUyxmVuzvt0yBACNTS3MrVmfv0J8\nuBsenAZPzoCjT/PeuIaOzV/+pvN6Hek1q515Pax9BOadBtteKXSp2rFZn02XFJSmq+EzHyfRf6AA\nb8/5gv8F2PqyF2gaNsPnZ8P4b1ttpthtWO7VbvbthLPnwJgrOtWslqvRaPZXZbqcwDRdkXzlTt9X\n9FSFlb/3nkpvaYIrnvCeVrdAU/yGTfAeAh02AR77Pjz0ddj/QaFLZcHGdD2BaLpyZkwaSXlZ+wW+\nfF/R88M9sOgK72n04f/ivTENHedffib/PtIfvvoQnPFvsPZhqL2r0CWyudFM17O1oTGjdD/lfUXP\nbath4TRo2ASfvwFOsdpMyQqF4NQfwjFnwMc+XejSWLAxXc+ginIiCQKL701XSUwdXel/f5Eq1N4J\nf54FPY+Eyx+Ho8b7m6cJhsqTCl0CwJrRTBdUkKarQvpwjzdr8OPXwfBTvdFmFmhMnlnNxnQ5eW+6\nKpT9H8DL93tPmX/wDpw5GyZ8z5rNTEFYsDFdUl6argplw7Pw+hNQd6+3Cmbfo+Hyx7yH/4wpEAs2\npmQF5VmavNq0Au52z+ec8BUY+01vAk1jCsyCjSlJ0WdpokOco8/SAKUdcF571Pv+vTVQYTOdm+Cw\nYGNKUqpnaTobbIJUY2pXlt6HUdNtMR855kwLNCZwrKfQlCS/nqUJ0uwD8WUp31PPR/Zu5uVeE/Je\nFmM6YsHGlCS/poEJ0uwD8WWZGFoFwOz1VqsxwWPNaCawOtNcNWPSyHZ9NpCbZ2lyXWOKvsZIQyNh\nEVpUqUzztcbneVZ4Fatbj+aV3baCpgkeq9mYQOpsc9XU0ZXcfP4JVFaUI0BlRTk3n39Cp/tWepeX\nZZSeSuxrBGhxM7Cn+1pja2n92cXoUD1LW8YUbCYEY1Kxmo0JpFx08PvxLE2ymdqzmcE90WuMSue1\nxtbePh9+CYC/h04u3ZkQTFGzYGMCKUiTZcZq2NeUUXoqHb2WjvbHzoRw1t5VRGQAX/vSOaU9tNsU\nLWtGM4FUsHVeOpDLcnV0TjrXnDq6kuXfP5kzur9G5dgLmHrS4IzLYUw+dBhsROQwEVkpIqtFZK2I\n3OjSh4vICyJSLyIPiEh3l97D/Vzv9g+LudYsl75eRCbFpE92afUiMjMmPeM8TGnoaLLM6roIE+Y8\nxfCZjzNhzlN5G3qcy0k8E10r42tufwOWXg8t+2HkORmXwZh8Sadmsx84Q1VPBEYBk0VkHPBL4Neq\n+nFgF3ClO/5KYJdL/7U7DhE5DrgYOB6YDPyXiIRFJAzcDpwNHAdc4o4l0zxMaYiO0GpsaiHsOkNi\nO/gL+axLdOBBRcyAgMPKsmsgiB3EACR8rQnt2gjP/hru+Czc/hlvYaxPngdDbSZnE1wd9tmoqgL/\ndD+WuS8FzgAudenzgRuAO4ApbhtgEXCbiIhLX6Cq+4G3RaQeONkdV6+q/wAQkQXAFBF5LdM8XFlN\nEYufZqZFte1TfmwfhV+zA6Rrf3Nr2/aufU1ZT4WT9iCGxl3wyoOw5kHYstJLG/wZmPxLOH4qHP6x\njPI1Jt/SGiDgah+rgI/j1ULeAhpUtdkdsgWI/sdUApsBVLVZRHYD/Vz6ipjLxp6zOS59rDsn0zze\njyv3dGA6wNCh9qBbPnR2Kpd0AkmyjvNIQyMT5jzF1oZGepeXIeJ13Od6Spm8Brttq+HFP3iBprkR\nBnzKWyrgU+dDn2G5zStOkKblMcUvrWCjqi3AKBGpAB4BjvW1VDmiqvOAeQBVVVVW6/FZLia/TGcU\nWrKVNqN5AjQ0NrVLy+UknL6PlGveD+sWw8rfe7WYbuXw6a/AZ74OA0/MTR4d6LITmRrfZNTYrKoN\nwNPAeKBCRKLBajAQbTCPAEMA3P7ewI7Y9LhzkqXvyCIPU0C5mMolndFeqTrWk8nllDK+jJRThbWP\nwCPfgl8dBw9/A/a9D5P+A657Dc77bd4CDQRrWh5TGtIZjdbf1WgQkXLgLOA1vKDzZXfYNGCx217i\nfsbtf8r1pSwBLnYjyYYDI4CVwIvACDfyrDveIIIl7pxM8zAFlItP/OmM9oqfHSCc5hOVuap55HxZ\n6X074cHLva/Vf/L6Yv7PQ3DtKhh/DZT36XSZMxXU55xM8UqnGW0gMN/124SAhar6mIisAxaIyC+A\nOuBOd/ydwL1uAMBOvOCBqq4VkYXAOqAZuMY1zyEi1wI1QBi4S1XXumv9OJM8TGEla94aVFGedvt/\nuks2x3asD5/5eNrly4WcLCvd0gybnoc1C2HtYmjaB2de75ZtzqzW5odUv0tjsiFdpUJQVVWltbW1\nhS5GSYtv5wfvE/8FYyp5aFXkkPTYocydeeOeMOeppH04ifIrGFXY8Aysuhvql8GHDVDWCz55Lpxy\nLXzshE5nkatO/WS/y4LfQ5N3IrJKVTu93KtNV2NyJtkn/o7a/zvbEZ1ohmeAXt3D7DvQUviRVK2t\nsP5x79mYyCro2Q+O/QKMOAtGTITuvXKSTS479XNSezMmhtVsjO+Gz3ycRH9lQvLmmsqKcpbPPCPt\nPAI7TPetp+HJH8H7b3hDlU/5Doy6FMpy3xyVrIaX6b00JpbVbExBZPOmnqr9P9UzM8NnPp52Hn7M\n8Nwp+3bCX2+Al+ZDv4/DBXfCcVMh7N+/nHXqmyCziThN2rKdJibZ6K3Tj+1PKMVIskIvu5yVD3fD\n0zfDLZ+Gunthwnfhm8/CCV/2NdBAcCcvNQasZmMykKzv5bqFq4Hk/QKJ2v9PP7Y/D62KtC0Ylkqu\nn873pclt/z9h5TxY/huv4/+T58HpP4GPfjInZU6HX6uTGpMLFmxM2pI1x7SodtgRHd/MNWHOU0kX\nDssk73TEBpfe5WXsPdBMU0v7VTFTlT2lpkZvIsxnfuU9hPmJyV6QSfAApt/9Stapb4LMgo1JW6pp\nYjKtfWQaPLJtCoofoRU7jU1UVjWn/f+E/50DaxbBB9vg6NPg9J/BkM+kVQ6b/sV0NRZsTJtEn7yB\ndrWCsrC01QripRtAqusihETSakKDzjUFpVp6OVZs2dOqgWxZCc/9FnoPhWmPwfDPZVwOP5oHLaCZ\noLJgY4DEb1QzHlwNQltwaWhsoiwkhARaE8SJdGof0Xw6CjRhEVpVO90UlG4A7O3Wp0n7Dbv5gPf9\nontg0Oisy5HLkWJBWHrBmGQs2Bgg8RtVU4KI0tSqVJSXsb+5Ne2O6NiaAuI9SJ9Ktk+qJ6qRpGr6\ni7X3QHO7RdtiJXzDbnHBJtw9rbLlY/oXG/psgsyGPhsgszek3Y1N7SbCTLWyZPxw6Y4CjQAXjMn8\nmZlkw7KH9UvvzbypRQ8GxAQOSc8w2OR88s4EbOiziVeo5dMTsZqNAVJ3/scLifD9B15mUEU5v75o\nFODVjKJpHa2qmYoCT7++Pen+ZP0pyWoky9/amXbe0WumVQNpCzZlhxybSD5GitnQZxMraH14FmwM\nkPiNqiwk7fpsoqL9LYn6daJpNz66loZ9TQmnqelIfC0iGmDig0DsP08umoqiAWDGotXtXnNZWA59\nw86wZgP+z3JgQ59NrKD14VmwMUD7N6pIQyNhkbb+mejyyolGkCXr19m179Ahxumq6HmwtlBdF2HG\ng6sT5gMH/3kyqZmB11wXe8V2NYD4rBJl3eJeXyi9mk2+BG7aHlMwQevDsz4b02bq6Mq2voVoUGlo\nbOLDplZ+fdEoWvM0aWtsNjcsWZs00ERFGhozXr2zvCxEn55lh/Q5za1Zf0h+Ta166AqVGTajGZNv\nQevDs2Bj2klV9e7sH6kAFeVl9CxL/We3O+bBy0QPYcYLi7RbvTMd+5pa24Lo8plntNUG/BogYEy+\n5WNQSibSWRZ6iIg8LSLrRGStiHzXpfcVkaUi8qb73seli4jcKiL1IvKKiJwUc61p7vg3RWRaTPoY\nEVnjzrlVxJudMZs8TOekerPNtPYQq6K8jLfnfIGXZ09k3c/PZsOcLyQNDJkGtWgtbOroSpbPPINb\nLhqVVjlj19TpKO926ft2wvY3vG0LNiag4pdPTzVqNB/Sqdk0A9ep6nHAOOAaETkOmAksU9URwDL3\nM8DZwAj3NR24A7zAAcwGxgInA7OjwcMd842Y8ya79IzyMJ2X6s02+scbTjFTczIf7G8+ZNjljEkj\nvUEIMcpC7Tvj+/TsuJkqPmhFy1lR3vG58cE15afBt5+BOyfB3GNg9Z/gyJGBWMLZmGSiH8DenvOF\ndjX4Qugw2KjqNlV9yW1/ALwGVAJTgPnusPnAVLc9BbhHPSuAChEZCEwClqrqTlXdBSwFJrt9R6jq\nCvVWcrsn7lqZ5GE6KdWbbXRUWIsqmYabllblxkfXHroj/kJxP88+93jKwslzS9UssL+5tcNyxQfX\nRJ8G5547jKnv/BbumQJ7tsLnroMr/wpXPw9ZBN5sBOl5CWOykdFoNBEZBowGXgAGqOo2t+sdYIDb\nrgQ2x5y2xaWlSt+SIJ0s8tiG6ZRkw2eh/fLN2QwViB+hNrdm/SHDqqMPV0bLEV+e3jGj41IN7U3n\n+Z5kgaptRJcqrF4AS6+Cvduh6go483oo75Pgav4J2vMSxmQj7WAjIh8BHgK+p6p7JOYTnaqqiPg6\nVCmbPERkOl4zG0OHDvWlXMUk/oHI04/tz9Ovbz/kmYz44bPVdRGuW7g67Ykz0y1HsqHK8U1b6Q7n\njX19HZW0T88yZp97/CHXjV5jyO6X+OlhCzlB10NlFVz6AFR23DXoxzICQXtewphspBVsRKQML9Dc\np6oPu+R3RWSgqm5zTVjvufQIMCTm9MEuLQKcFpf+N5c+OMHx2eTRjqrOA+YBVFVV5WfcbkAl+nT8\nxxWb2vaAgaNgAAAU10lEQVQn+7Sc7sSZUWVhQYADCWaGrigvO6QciWQz6i2d64I3cu3/XXgiU0dX\ntjVNRQPDlKOVZ9e8xQ+p5ks9lrO7tSc/06uoGvNtplYOSXndRGXIVQ0kaM9LGJONdEajCXAn8Jqq\n/ipm1xIgOqJsGrA4Jv0yN2JsHLDbNYXVABNFpI8bGDARqHH79ojIOJfXZXHXyiQPk0Q6zUqJRmel\nc150wEBlRTkXfWZI0vnPRODGR9d2eL19B5r5WfWajPoo0m02iw00sXOp7W7YwdfWXs6S8AzOCz3H\nb5q/xKn7b+GPB/6FuX95M+V1U5Uh0T3NVNCelzAmG+nUbCYA/wqsEZGXXdpPgDnAQhG5EtgIXOj2\nPQGcA9QD+4ArAFR1p4j8HHjRHXeTqkYnrroauBsoB550X2Sah0msui6S9tP1kYbGdp/20zmvRbWt\n/+PGR5M/hJnurAK79jWlVeuKlepTvkC7vqdRN/6l7fmdKnmd88PPcnZ4JX3kn9S0VPH/mr/CG3qw\nJpNuDcKvGojNeWZKgWiengovtKqqKq2trS10MfIu3ealqPhpXDLRmXPTUVlRzvKZZwCH9o3sO9Cc\nMJjFnxOd+qYHB7ih23wu6fY0+7QHS1vHcHfzJOp0RMprpDJhzlMJg3O656fi95LSxiQjIqtUtaqz\n17G50UpcJrMudzZY+P2xJVpDqK6LtJssM1ntSzhYU5sxaSRza9YzTDfz07L76C17GR2q5/bm87it\neSqNHJY039OP7Z9W+fysgSQatBFbA7XgY4LOgk2JS9WEM+GYvmzY0ZhRk1mhVddF+Okja5IuTR0r\nekSkoZH/fHg5J7a8yvfLFvGJUIRNrf35cdM3eKDl9LbjkwXbVEsexMrXrMs2FNoUIws2JS5VENmw\no7FdE1Muhzf7QYEfLHw54ZLUyfTkQ2Z0e4Bpob8QCitbtS9XH/gOT7SOS3j9RLY2NKbdjBUfcKKD\nA3IZBGwotClGFmxK3IxJI/neAy8n3BfbLJXJ8OZCSjfQhGnhovDf+Ha3RxjALha0nMay1pN4unU0\nrUkGYYYTLKEA0Lu8rN0yB23r+HBoEMlHrcOGQptiZMGmRMV+Ek9K4GfVa7jvhU0dLtdcTMbKa8wq\n+xOjQm/RqN25vOlH/L31xA7Pi07DE3srBG8odqJlB25YsvaQAJKPWkfaq4kaEyAWbErQz6rXcN+K\nTR122KvSbohxsTs39By/7X4bABHtx++az+XO5rPZTkVa5yfqs1ESP6AKiZc/yEetw4ZCm2JkwaYE\nxNZiepeXpbUGTCk5gr082v2nHBXyJpiobf0Elx2Yyb4UI8zi5WrYdrL73zuNGajTZcs/m2JkwaYI\npOqcjq/FdKVAc4xEODf8PNeEF1MmLdzXfCaPh07jzfDH2ZdG6AiL0Kqa05F4ySaBzvXk0Lb8syk2\nFmwCLlWHM5BWc1mp6UUjl4aX8eNuC+gmraxrPYp7mz/PgpbTUUKkU0cpLwu3W0hq9E1/SXuGg6hE\n6+U0JLlGsnRjugoLNgGXrMM52QizUnYY+7m97FbODNcBsKL1k9zZdDZLW8dw6MI4HVwrZmnq6roI\nu1MEg7KQN0otdoxAWUi44bzjDznWOu+NScyCTcDZcFbPf5f9iklhb7qht1sHcGPzZfytdRSZBpmo\nXfua2mqIc2vWk2yZtbAIc79yYttxHfWRWOe9MYlZsAm4Ynmy3w992MPY8JtcGFrGGeGX2ac9mN08\njUUtp7rmss5pbGrp8EHWVtVDFnJLxTrvjUnMgk3AnX5s/y7XL9OP3azocS1l4tUOdujh/LH5TK5v\nviLpA5nZSvRsTaxsmr+s896YQ1mwCbDquggPrYp0mUDzaXmLJT3+rV3aLc3nc3vzVJp8/FNNdn/L\nwmLNX8bkiAWbAMtkxuZiNlTe5bvdHuaC8DMANGmYa5u+Q01rFdn2yWTz3ExFzDMyyZaNNsZkx4JN\nQCR6lqa0BwcoY+QNzg8/y1e7LWtL/faBa3m09ZSc5HDLRaOYW7M+rT6vXKw5k4l0Jva0NWxMKbFg\nEwDxD2ZGn6Wp6FmW8bMfxWB8aC03dbubESFvqednWj7FQy2n8njruJw1lw2qKG/Xd5JsYTPI/2ix\ndCbrtGUETKnpsLdVRO4SkfdE5NWYtL4islRE3nTf+7h0EZFbRaReRF4RkZNizpnmjn9TRKbFpI8R\nkTXunFtFvGets8mj2FTXRRh141/4Y4IBAI1NLah6b4SloDtNzO42n2e6f5f7u/97W6C5+sB3uKxp\nJtWtn80q0JSXhRI2tO070Ex1XaTt5xmTRia8l316lrV7uDMfUk3WmckxxhSTdIb23A1MjkubCSxT\n1RHAMvczwNnACPc1HbgDvMABzAbGAicDs6PBwx3zjZjzJmeTR7GJfnJNNb1MQ2MTEhOGQu5dNccz\nn/jq9FAdK3pcwxuHTeOKbjV8RBpZ0Hwalx74CcM+/BNPtI7r1DDm5lZN2DcTfY4mGnCmjq7k5vNP\noLKiHMFrNrvlolHUXT8x7zWFdCbrtGUETKnp8KOkqv5dRIbFJU8BTnPb84G/AT926feoqgIrRKRC\nRAa6Y5eq6k4AEVkKTBaRvwFHqOoKl34PMBV4MtM8VHVbZi+9sNLt/N/XdPBxw+gT7MUwOu3H3e7n\nW90ebZf2++Zz+FXzl1MuwZyJHt1C7G9O9jjmoVP752Nhs3SkM8uAzURgSk22DeQDYt7c3wEGuO1K\nYHPMcVtcWqr0LQnSs8mjqIJNKX5CHcgOjglt5Y/db26X/nrrEL58YDb/pGdO80sVaKJi73OyfpDa\njTt5bPW2vI1ES2eWAZuJwJSaTvfGqqqKiK8ftrPNQ0Sm4zW1MXTo0JyXqzNKaWaAHhzglrLbOTv8\nYrv0F1s/wTcOXEcDhxeoZO1rAsn6QeLX9Nm1r4kZixKvxJkLyWYZAG8gQzTtgjGVPP36dhuNZkpC\ntsHm3WjTlWsme8+lR4AhMccNdmkRDjaJRdP/5tIHJzg+mzwOoarzgHkAVVVVgWp9SvTJtdicF3qO\nSeGVfCG8si1tSct4nmk9gcUtEzhA7tZwyUZ8TSCT2mRTi+Z0dc148bMMJKp1PbQqkvfBC8b4Jdtg\nswSYBsxx3xfHpF8rIgvwBgPsdsGiBviPmEEBE4FZqrpTRPaIyDjgBeAy4LfZ5JHl6/BNomckoP2n\n2QvGVBbZkszKaKnnprL/oTd7GRra3rZndevRTDvw44LWYmJVxtUEqusihERSzoMWL59NnflYTtqY\nQuow2IjI/Xi1kiNFZAveqLI5wEIRuRLYCFzoDn8COAeoB/YBVwC4oPJzINrOclN0sABwNd6It3K8\ngQFPuvSM8giSRJ9S45cEiDQ0Fs2SzGU0c2fZXE4Nr2mXvrzleBa0nM7jreNyPmdZZ8Q/oBn9fSQK\nNLmeFy1bNvrMlLp0RqNdkmTXmQmOVeCaJNe5C7grQXot8KkE6TsyzSMofvpIcTePAQitfD70Er/v\n/qt26X9vOYFPhjZx+YEfsVaHF6h0qcW/QScb+RcW4ZKxQ3hg5WaaWtuHnHzPi2ajz0ypsxkEcuyr\nv3+evQeKNdAoR8m7XBpexiXhpzhCDr75LW0Zw0+armQ7FQUsX3ri36CT1Q5aVfnF1BOoOqovNyxZ\nW9B50Wz0mSl1FmxyqLouwvK3dnZ8YICEaeGq8KN8u1s15XKg3b57mz/Ph3Tnruaz2Ua/ApUwMyHx\nZg8YPvPxtr6yjmoNQVgSwNbBMaXOgk0O3bBkbaGLkLbzQ3/nV91/l3Dfoy3jmNt8EZt0QML9QdWz\nLERTq7bNJxd9juaCMZU8tCoS+FpDEIKeMX6xYJOl+NFmpx/bP+XUM4WnjJK3qO5xfdIjZjRN5+mW\n0bxP7zyWq3NiR50lmmyzsamFp1/fzs3nn2C1BmMKyIJNFhKNNgviyLLuNHFx+CluKpufcP+TLZ/h\nnpaJPN96fJ5Llhvxo85SjeiyWoMxhWXBJgs3Pro2oKPNlOHyDheG/3bIvGRRj7aM48amaUVVe0km\nPrjYiC5jgsuCTYaq6yKBWmPmWNnEn3vMTHnMC63H8vUDP+SDHM9NVmjxQcRGdBkTXBZsMnTjo4Ub\nBNCHPdxS9l98PBShB00cKXsSHvdC67Hc0nwBta0jc7YYWdAIHBJEbESXMcFVmu9EPsl3rebjsoXT\nQqs5I1THANnFMaHks/L8ofls7m05i406gOJa8SZzAnx13NCEQcT6ZowJJgs2aaiui7R76M8Ph7Gf\nj0oD/9btj5wSepVesj/psVv0SH7TfD6LWk7t1MJjxSh+zjNjTHGwYNOB6roIMx5cfch0JplRorWN\n/jRwpOxmXtmvGBLazgdazuGSev6rrdqXaQdm8k8t5316l1zTWLiDCTKjNZlfTD0hf4UyxuRUab1r\n+WBuzfqMA013mjhAN84NPc9vu9+W8tj4QPNW60Bub57CY63jCz5Fv9/Ky8LcfL4XQOI79qMTZFpN\nxpjSYMGmA8kXOFMGsYPvd1vEiNAWjpQ9DJb3M7r2uft/wXodQj/2FM10MJ0VEm9560RBxDr2jSld\nFmxSqK6LcKxsYlxoHf1kD2eG6jgutBGARu1+yFxiiSxuOYWdejj3tpzFHu2V8PmWUg00E47py4Yd\njWkFEOvYN6a0WbBJ4YYla/nXUC3XlS0CYI96z3Xs1R78b+uJ9GYvI0IRbm3+Eutaj2JM6A2qWyaw\nnT6pLtsl/B/rYzHGxLBgk0JDYxN3cB6Pto6njBY26MdSds6/1PKJPJaucKJNYRXlZYjArn1NbZ38\n1sdijEnEgk0HmunGBh1Y6GIUTCHWdjHGlJ6iDTYiMhn4DRAG/qCqc3J5/eq6SC4vF0h9epbxhU8P\n5LHV29qeIUrVgW+MMdkqymAjImHgduAsYAvwoogsUdV1ucpjbs36XF2qIDIJGta3YozxW1EGG+Bk\noF5V/wEgIguAKUDOgk2y6eqDqEe3EAeaW23IsDEmsIo12FQCm2N+3gKMzWUGyaarLxTrOzHGFLNi\nDTZpEZHpwHSAoUOHZnRuounqO8sChjGmqyrWYBMBhsT8PNiltaOq84B5AFVVVRnNORM7XX2kobFt\naG/8EF/gkEk6rZPdGGPaE00xAWJQiUg34A3gTLwg8yJwqaomXWymqqpKa2tr81RCY4wpDSKySlWr\nOnudoqzZqGqziFwL1OANfb4rVaAxxhhTWEUZbABU9QngiUKXwxhjTMe61spbxhhjCsKCjTHGGN9Z\nsDHGGOO7ohyNlg0R2Q5sjEs+EshsxbPgKNayF2u5oXjLbuXOv2Ite6JyH6Wq/Tt74S4TbBIRkdpc\nDOkrhGIte7GWG4q37Fbu/CvWsvtZbmtGM8YY4zsLNsYYY3zX1YPNvEIXoBOKtezFWm4o3rJbufOv\nWMvuW7m7dJ+NMcaY/OjqNRtjjDF50GWDjYhMFpH1IlIvIjMDUJ4hIvK0iKwTkbUi8l2X3ldElorI\nm+57H5cuInKrK/8rInJSzLWmuePfFJFpeSp/WETqROQx9/NwEXnBle8BEenu0nu4n+vd/mEx15jl\n0teLyKQ8lbtCRBaJyOsi8pqIjC+Gey4i33d/J6+KyP0iclhQ77mI3CUi74nIqzFpObvHIjJGRNa4\nc24VEfGx3HPd38orIvKIiFTE7Et4L5O91yT7fflV9ph914mIisiR7uf83HNV7XJfeJN3vgUcDXQH\nVgPHFbhMA4GT3PbheLNaHwf8JzDTpc8Efum2zwGeBAQYB7zg0vsC/3Df+7jtPnko/w+APwGPuZ8X\nAhe77d8B33LbVwO/c9sXAw+47ePc76EHMNz9fsJ5KPd84OtuuztQEfR7jrd44NtAecy9vjyo9xw4\nFTgJeDUmLWf3GFjpjhV37tk+lnsi0M1t/zKm3AnvJSnea5L9vvwqu0sfgjeB8UbgyHzec1//kYP6\nBYwHamJ+ngXMKnS54sq4GDgLWA8MdGkDgfVu+7+BS2KOX+/2XwL8d0x6u+N8KutgYBlwBvCY+wN8\nP+afsu1+uz/08W67mztO4n8Hscf5WO7eeG/aEpce6HvOwZVq+7p7+BgwKcj3HBhG+zftnNxjt+/1\nmPR2x+W63HH7vgTc57YT3kuSvNek+h/xs+zAIuBEYAMHg01e7nlXbUZLtKx0YFY4c80co4EXgAGq\nus3tegcY4LaTvYZCvLZbgB8Bre7nfkCDqjYnKENb+dz+3e74QpR7OLAd+B/xmgD/ICK9CPg9V9UI\n8H+BTcA2vHu4iuK451G5useVbjs+PR++hvepHjIvd6r/EV+IyBQgoqqr43bl5Z531WATWCLyEeAh\n4Huquid2n3ofIwI1fFBEvgi8p6qrCl2WLHTDa2q4Q1VHA3vxmnTaBPSe9wGm4AXLQUAvYHJBC9UJ\nQbzHHRGRnwLNwH2FLks6RKQn8BPg+kKVoasGm7SWlc43ESnDCzT3qerDLvldERno9g8E3nPpyV5D\nvl/bBOA8EdkALMBrSvsNUCHeiqrxZWgrn9vfG9hRgHKD94lsi6q+4H5ehBd8gn7PPw+8rarbVbUJ\neBjv91AM9zwqV/c44rbj030jIpcDXwS+6gIlHZQvUfoOkv++/HAM3oeT1e5/dTDwkoh8LIuyZ3fP\n/WifDfoX3ifaf7ibH+20O77AZRLgHuCWuPS5tO9I/U+3/QXad+qtdOl98foh+rivt4G+eXoNp3Fw\ngMCDtO/8vNptX0P7zuqFbvt42new/oP8DBB4Bhjptm9w9zvQ9xwYC6wFerqyzAe+HeR7zqF9Njm7\nxxzaWX2Oj+WeDKwD+scdl/BekuK9Jtnvy6+yx+3bwME+m7zcc1//kYP8hTcC4w28kSI/DUB5PovX\nlPAK8LL7OgevbXcZ8Cbw15hftgC3u/KvAapirvU1oN59XZHH13AaB4PN0e4Pst79U/Vw6Ye5n+vd\n/qNjzv+pez3rydGIojTKPAqodfe92v1TBf6eAzcCrwOvAve6N7lA3nPgfry+pSa82uSVubzHQJW7\nD28BtxE34CPH5a7H68eI/o/+rqN7SZL3mmS/L7/KHrd/AweDTV7uuc0gYIwxxnddtc/GGGNMHlmw\nMcYY4zsLNsYYY3xnwcYYY4zvLNgYY4zxnQUbY4wxvrNgY4wxxncWbIwxxvju/wNRJZT7IeEgOQAA\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10f0ff210>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit1 = fit_ridge(set_1, l2_penalty= l2_small_penalty)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(398707.26339912612, array([ -2.19894686e+02,   1.69130364e-01,  -2.27849601e-05,\n",
      "         1.34431957e-09,  -1.20432513e-14,   7.64003745e-16,\n",
      "        -4.89141524e-16,  -2.93941735e-16,  -6.17970420e-16,\n",
      "         3.81800372e-16,   5.15069439e-16,   8.98788959e-16,\n",
      "         1.08009405e-15,  -4.37750733e-16,   1.40403443e-15]))\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10edc5b10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit2 = fit_ridge(set_2, l2_penalty= l2_small_penalty )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(389087.92292748205, array([ -1.98970177e+02,   1.57531730e-01,  -2.04008046e-05,\n",
      "         1.26203624e-09,  -1.59074526e-14,  -2.70708681e-16,\n",
      "        -4.55047514e-16,   5.97386817e-16,   4.28518765e-16,\n",
      "         5.27358368e-16,  -4.79130198e-16,   1.20138611e-15,\n",
      "         6.23420738e-16,   3.65494169e-16,  -3.00231269e-16]))\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10f0a92d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit3 = fit_ridge(set_3, l2_penalty= l2_small_penalty)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(290807.15926164563, array([ -3.48248202e+01,   7.33755964e-02,  -5.31371126e-06,\n",
      "         3.38536611e-10,   3.57683193e-14,  -1.23385098e-15,\n",
      "        -4.13869228e-16,   8.99222180e-16,  -4.98668926e-16,\n",
      "        -5.35366910e-16,   2.49778932e-16,   4.01979504e-16,\n",
      "         3.06323327e-16,  -1.03551797e-15,  -3.19399858e-16]))\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n9+cJQoGeAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10b69be90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit4 = fit_ridge(set_4, l2_penalty= l2_small_penalty)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[62.385771800494737, -219.89468617968777, -198.97017666601621, -34.824820215971705]\n",
      "(-219.89468617968777, 62.385771800494737)\n"
     ]
    }
   ],
   "source": [
    "coefs = [fit1.coef_[0],  fit2.coef_[0], fit3.coef_[0], fit4.coef_[0]]\n",
    "print(coefs)\n",
    "print(np.min(coefs), np.max(coefs))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The four curves should differ from one another a lot, as should the coefficients you learned.\n",
    "\n",
    "***QUIZ QUESTION:  For the models learned in each of these training sets, what are the smallest and largest values you learned for the coefficient of feature `power_1`?***  (For the purpose of answering this question, negative numbers are considered \"smaller\" than positive numbers. So -5 is smaller than -3, and -3 is smaller than 5 and so forth.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ridge regression comes to rescue"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generally, whenever we see weights change so much in response to change in data, we believe the variance of our estimate to be large. Ridge regression aims to address this issue by penalizing \"large\" weights. (Weights of `model15` looked quite small, but they are not that small because 'sqft_living' input is in the order of thousands.)\n",
    "\n",
    "With the argument `l2_penalty=1e5`, fit a 15th-order polynomial model on `set_1`, `set_2`, `set_3`, and `set_4`. Other than the change in the `l2_penalty` parameter, the code should be the same as the experiment above. Also, make sure GraphLab Create doesn't create its own validation set by using the option `validation_set = None` in this call."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "collapsed": true,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "l2_large_penalty=1.23e2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(538993.05747681961, array([  2.33302293e+00,   3.56038341e-04,   3.37288360e-08,\n",
      "         2.06040887e-12,   1.36746708e-15,  -1.92341983e-17,\n",
      "         1.04834390e-17,  -9.30269146e-18,  -8.46418543e-18,\n",
      "        -1.59248399e-17,   9.41566963e-18,   1.22423043e-18,\n",
      "         5.91820334e-18,  -1.47750360e-17,  -2.35836923e-17]))\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10f262c10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit1 = fit_ridge(set_1, l2_penalty= l2_large_penalty)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(529947.12444266211, array([  2.10772269e+00,   3.94453401e-04,   6.78444742e-08,\n",
      "         9.15014451e-12,   1.94720746e-15,  -2.53164281e-17,\n",
      "         1.02334725e-17,  -4.38033903e-18,  -7.39193953e-18,\n",
      "        -1.03274762e-18,   8.33154295e-18,   4.90077187e-18,\n",
      "        -3.58306755e-18,  -1.75676068e-17,  -1.57687979e-17]))\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10b7b9810>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit2 = fit_ridge(set_2, l2_penalty= l2_large_penalty)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(533849.96743886487, array([  2.31123641e+00,   4.20062138e-04,   6.28136039e-08,\n",
      "         6.89987701e-12,   1.20756329e-15,  -1.89793802e-17,\n",
      "         5.95314134e-18,  -8.07909989e-18,  -5.49082928e-18,\n",
      "        -1.34742751e-17,   2.35169643e-18,  -4.76775704e-18,\n",
      "        -1.73049455e-17,  -1.11975184e-17,  -3.04976179e-17]))\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x110ea3a90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit3 = fit_ridge(set_3, l2_penalty= l2_large_penalty)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(524791.1112752551, array([  2.10018378e+00,   4.09722690e-04,   7.60925093e-08,\n",
      "         1.16346493e-11,   2.52725095e-15,  -3.60823239e-17,\n",
      "         1.34459584e-17,  -1.42653353e-18,  -1.20066039e-17,\n",
      "        -7.79542974e-18,   1.44429140e-17,  -7.79955285e-18,\n",
      "        -2.56592299e-18,  -2.15123845e-17,  -2.67990091e-17]))\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZMAAAD8CAYAAACyyUlaAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3X+UXGWd5/H3t6urO5UA6QQjAx1iosMJC4MkksE4eOYM\nuEOCivSiI7iirOPInh1nd3A8mQ077gCuc4ib3QE94ziyiqMzDIKCIYpOZCCe2WUGNDGJIUqGKL/S\noGRIOmi6SVd3P/vHfW6luvreqnvrVldVV31e59Spqqdu3ft0dffzree3OecQERHJoqfVGRARkblP\nwURERDJTMBERkcwUTEREJDMFExERyUzBREREMlMwERGRzBRMREQkMwUTERHJrLfVGWiWV73qVW75\n8uWtzoaIyJyyc+fOf3XOLal1XNcEk+XLl7Njx45WZ0NEZE4xs2eSHKdmLhERyUzBREREMlMwERGR\nzBRMREQkMwUTERHJrGtGc4mItJMtu4bZvG0/z4+MccZAgQ3rVjK0erDV2aqbgomISJNt2TXMDfft\nZaw4CcDwyBg33LcXYM4GFDVziYg02eZt+0uBJDRWnGTztv0tylF2CiYiIk32/MhYqvS5QMFERKTJ\nzhgopEqfCxRMRESabMO6lRTyuWlphXyODetWtihH2akDXkSkycJOdo3mEhGRTIZWD87p4FFJzVwi\nIpKZgomIiGSmYCIiIpklCiZm9rSZ7TWz3Wa2w6ctNrMHzexJf7/Ip5uZfdrMDpjZD83sDWXnudYf\n/6SZXVuWfoE//wH/Xqv3GiIi0nxpaiYXO+dWOefW+OcbgYecc2cBD/nnAJcBZ/nbdcBnIQgMwI3A\nG4ELgRvD4OCP+VDZ+9bXcw0REWmNLM1cVwBf8o+/BAyVpX/ZBR4FBszsdGAd8KBz7rBz7gjwILDe\nv3aKc+5R55wDvlxxrjTXEBGRFkgaTBzwHTPbaWbX+bTTnHMv+Mc/A07zjweB58ree9CnVUs/GJFe\nzzVERKQFks4zebNzbtjMXg08aGZPlL/onHNm5hqfvWzX8IHvOoBly5bNSr5ERCRhzcQ5N+zvXwS+\nTtDn8fOwacnfv+gPHwbOLHv7Up9WLX1pRDp1XKMy37c759Y459YsWbIkyY8qIiJ1qBlMzGyBmZ0c\nPgYuBR4HtgLhiKxrgfv9463A+/2Iq7XAUd9UtQ241MwW+Y73S4Ft/rWXzWytH8X1/opzpbmGiIi0\nQJJmrtOAr/vRur3A3znn/t7Mvg/cY2YfBJ4B3u2P/xbwVuAAMAp8AMA5d9jM/gfwfX/cx51zh/3j\n3wf+GigA3/Y3gE1priEiIq1hwQCqzrdmzRq3Y8eOVmdDRGROMbOdZVNCYmkGvIiIZKZgIiIimSmY\niIhIZgomIiKSmYKJiIhkpmAiIiKZKZiIiEhmCiYiIpKZgomIiGSmYCIiIpkpmIiISGYKJiIikpmC\niYiIZKZgIiIimSmYiIhIZgomIiKSmYKJiIhkpmAiIiKZKZiIiEhmCiYiIpKZgomIiGSmYCIiIpkp\nmIiISGYKJiIikpmCiYiIZKZgIiIimSmYiIhIZgomIiKSmYKJiIhkljiYmFnOzHaZ2Tf98xVm9piZ\nHTCzu82sz6f3++cH/OvLy85xg0/fb2brytLX+7QDZraxLD31NUREpPnS1Ez+EPhx2fNPArc6534V\nOAJ80Kd/EDji02/1x2Fm5wBXA+cC64G/9AEqB3wGuAw4B3iPPzb1NUREWmXLrmEu2vQwKzY+wEWb\nHmbLruFWZ6mpEgUTM1sKvA34vH9uwCXA1/whXwKG/OMr/HP862/xx18BfMU5d9w59xRwALjQ3w44\n537qnBsHvgJcUec1RESabsuuYW64by/DI2M4YHhkjBvu29tVASVpzeQ24I+BKf/8VGDEOTfhnx8E\nBv3jQeA5AP/6UX98Kb3iPXHp9VxDRKTpNm/bz1hxclraWHGSzdv2tyhHzVczmJjZ24EXnXM7m5Cf\nhjKz68xsh5ntOHToUKuzIyId6vmRsVTpnShJzeQi4B1m9jRBE9QlwKeAATPr9ccsBcL63DBwJoB/\nfSHwUnl6xXvi0l+q4xrTOOdud86tcc6tWbJkSYIfVUQkvTMGCqnSO1HNYOKcu8E5t9Q5t5ygA/1h\n59x7ge3Au/xh1wL3+8db/XP86w8755xPv9qPxFoBnAV8D/g+cJYfudXnr7HVvyftNUREmm7DupUU\n8rlpaYV8jg3rVrYoR83XW/uQWP8V+IqZfQLYBXzBp38B+BszOwAcJggOOOf2mdk9wI+ACeDDzrlJ\nADP7A2AbkAPucM7tq+caIiKtMLQ66M7dvG0/z4+MccZAgQ3rVpbSu4F1yxf6NWvWuB07drQ6GyId\nb8uu4a4uVDuNme10zq2pdVyWmomIyDThENlwZFM4RBZQQOlwWk5FRBpGQ2S7l4KJiDSMhsh2LwUT\n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\nRK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x110621e50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit4 = fit_ridge(set_4, l2_penalty= l2_large_penalty)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These curves should vary a lot less, now that you applied a high degree of regularization.\n",
    "\n",
    "***QUIZ QUESTION:  For the models learned with the high level of regularization in each of these training sets, what are the smallest and largest values you learned for the coefficient of feature `power_1`?*** (For the purpose of answering this question, negative numbers are considered \"smaller\" than positive numbers. So -5 is smaller than -3, and -3 is smaller than 5 and so forth.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Selecting an L2 penalty via cross-validation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Just like the polynomial degree, the L2 penalty is a \"magic\" parameter we need to select. We could use the validation set approach as we did in the last module, but that approach has a major disadvantage: it leaves fewer observations available for training. **Cross-validation** seeks to overcome this issue by using all of the training set in a smart way.\n",
    "\n",
    "  * We will implement a kind of cross-validation called **k-fold cross-validation**. The method gets its name because it involves dividing the training set into k segments of roughtly equal size. Similar to the validation set method, we measure the validation error with one of the segments designated as the validation set. The major difference is that we repeat the process k times as follows:\n",
    "\n",
    "Set aside segment 0 as the validation set, and fit a model on rest of data, and evalutate it on this validation set<br>\n",
    "Set aside segment 1 as the validation set, and fit a model on rest of data, and evalutate it on this validation set<br>\n",
    "...<br>\n",
    "Set aside segment k-1 as the validation set, and fit a model on rest of data, and evalutate it on this validation set\n",
    "\n",
    "    * After this process, we compute the average of the k validation errors, and use it as an estimate of the generalization error. Notice that  all observations are used for both training and validation, as we iterate over segments of data. \n",
    "\n",
    "* To estimate the generalization error well, it is crucial to shuffle the training data before dividing them into segments. GraphLab Create has a utility function for shuffling a given SFrame. We reserve 10% of the data as the test set and shuffle the remainder. (Make sure to use `seed=1` to get consistent answer.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "train_valid_shuffled = pd.read_csv('wk3_kc_house_train_valid_shuffled.csv', dtype=dtype_dict)\n",
    "test = pd.read_csv('wk3_kc_house_test_data.csv', dtype=dtype_dict)\n",
    "train = pd.read_csv('wk3_kc_house_train_data.csv', dtype=dtype_dict)\n",
    "valid = pd.read_csv('wk3_kc_house_valid_data.csv', dtype=dtype_dict)\n",
    "#(train_valid, test) = sales.random_split(.9, seed=1)\n",
    "#train_valid_shuffled = graphlab.toolkits.cross_validation.shuffle(train_valid, random_seed=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once the data is shuffled, we divide it into equal segments. \n",
    "\n",
    "Divide the combined training and validation set into equal segments. \n",
    "Each segment should receive `n/k` elements, where `n` is the number of observations in the training set and `k` is the number of segments. Since the segment 0 starts at index 0 and contains `n/k` elements, it ends at index `(n/k)-1`. The segment 1 starts where the segment 0 left off, at index `(n/k)`. With `n/k` elements, the segment 1 ends at index `(n*2/k)-1`. Continuing in this fashion, we deduce that the segment `i` starts at index `(n*i/k)` and ends at `(n*(i+1)/k)-1`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With this pattern in mind, we write a short loop that prints the starting and ending indices of each segment, just to make sure you are getting the splits right."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 (0, 1938)\n",
      "1 (1939, 3878)\n",
      "2 (3879, 5817)\n",
      "3 (5818, 7757)\n",
      "4 (7758, 9697)\n",
      "5 (9698, 11636)\n",
      "6 (11637, 13576)\n",
      "7 (13577, 15515)\n",
      "8 (15516, 17455)\n",
      "9 (17456, 19395)\n"
     ]
    }
   ],
   "source": [
    "n = len(train_valid_shuffled)\n",
    "k = 10 # 10-fold cross-validation\n",
    "\n",
    "for i in xrange(k):\n",
    "    start = (n*i)/k\n",
    "    end = (n*(i+1))/k-1\n",
    "    print i, (start, end)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us familiarize ourselves with array slicing with Pandas. To extract a continuous slice from a DataFrame, use colon in square brackets. For instance, the following cell extracts rows 0 to 9 of `train_valid_shuffled`. Notice that the first index (0) is included in the slice but the last index (10) is omitted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>price</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>sqft_living</th>\n",
       "      <th>sqft_lot</th>\n",
       "      <th>floors</th>\n",
       "      <th>waterfront</th>\n",
       "      <th>view</th>\n",
       "      <th>...</th>\n",
       "      <th>grade</th>\n",
       "      <th>sqft_above</th>\n",
       "      <th>sqft_basement</th>\n",
       "      <th>yr_built</th>\n",
       "      <th>yr_renovated</th>\n",
       "      <th>zipcode</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>sqft_living15</th>\n",
       "      <th>sqft_lot15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2780400035</td>\n",
       "      <td>20140505T000000</td>\n",
       "      <td>665000.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.50</td>\n",
       "      <td>2800.0</td>\n",
       "      <td>5900</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>1660</td>\n",
       "      <td>1140</td>\n",
       "      <td>1963</td>\n",
       "      <td>0</td>\n",
       "      <td>98115</td>\n",
       "      <td>47.6809</td>\n",
       "      <td>-122.286</td>\n",
       "      <td>2580.0</td>\n",
       "      <td>5900.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1703050500</td>\n",
       "      <td>20150321T000000</td>\n",
       "      <td>645000.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.50</td>\n",
       "      <td>2490.0</td>\n",
       "      <td>5978</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>2490</td>\n",
       "      <td>0</td>\n",
       "      <td>2003</td>\n",
       "      <td>0</td>\n",
       "      <td>98074</td>\n",
       "      <td>47.6298</td>\n",
       "      <td>-122.022</td>\n",
       "      <td>2710.0</td>\n",
       "      <td>6629.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5700002325</td>\n",
       "      <td>20140605T000000</td>\n",
       "      <td>640000.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.75</td>\n",
       "      <td>2340.0</td>\n",
       "      <td>4206</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1170</td>\n",
       "      <td>1170</td>\n",
       "      <td>1917</td>\n",
       "      <td>0</td>\n",
       "      <td>98144</td>\n",
       "      <td>47.5759</td>\n",
       "      <td>-122.288</td>\n",
       "      <td>1360.0</td>\n",
       "      <td>4725.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0475000510</td>\n",
       "      <td>20141118T000000</td>\n",
       "      <td>594000.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1320.0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1090</td>\n",
       "      <td>230</td>\n",
       "      <td>1920</td>\n",
       "      <td>0</td>\n",
       "      <td>98107</td>\n",
       "      <td>47.6674</td>\n",
       "      <td>-122.365</td>\n",
       "      <td>1700.0</td>\n",
       "      <td>5000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0844001052</td>\n",
       "      <td>20150128T000000</td>\n",
       "      <td>365000.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.50</td>\n",
       "      <td>1904.0</td>\n",
       "      <td>8200</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1904</td>\n",
       "      <td>0</td>\n",
       "      <td>1999</td>\n",
       "      <td>0</td>\n",
       "      <td>98010</td>\n",
       "      <td>47.3107</td>\n",
       "      <td>-122.001</td>\n",
       "      <td>1560.0</td>\n",
       "      <td>12426.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2781280290</td>\n",
       "      <td>20150427T000000</td>\n",
       "      <td>305000.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.50</td>\n",
       "      <td>1610.0</td>\n",
       "      <td>3516</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>1610</td>\n",
       "      <td>0</td>\n",
       "      <td>2006</td>\n",
       "      <td>0</td>\n",
       "      <td>98055</td>\n",
       "      <td>47.4491</td>\n",
       "      <td>-122.188</td>\n",
       "      <td>1610.0</td>\n",
       "      <td>3056.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2214800630</td>\n",
       "      <td>20141105T000000</td>\n",
       "      <td>239950.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.25</td>\n",
       "      <td>1560.0</td>\n",
       "      <td>8280</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1560</td>\n",
       "      <td>0</td>\n",
       "      <td>1979</td>\n",
       "      <td>0</td>\n",
       "      <td>98001</td>\n",
       "      <td>47.3393</td>\n",
       "      <td>-122.259</td>\n",
       "      <td>1920.0</td>\n",
       "      <td>8120.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2114700540</td>\n",
       "      <td>20141021T000000</td>\n",
       "      <td>366000.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.50</td>\n",
       "      <td>1320.0</td>\n",
       "      <td>4320</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>660</td>\n",
       "      <td>660</td>\n",
       "      <td>1918</td>\n",
       "      <td>0</td>\n",
       "      <td>98106</td>\n",
       "      <td>47.5327</td>\n",
       "      <td>-122.347</td>\n",
       "      <td>1190.0</td>\n",
       "      <td>4200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2596400050</td>\n",
       "      <td>20140730T000000</td>\n",
       "      <td>375000.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1960.0</td>\n",
       "      <td>7955</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1260</td>\n",
       "      <td>700</td>\n",
       "      <td>1963</td>\n",
       "      <td>0</td>\n",
       "      <td>98177</td>\n",
       "      <td>47.7641</td>\n",
       "      <td>-122.364</td>\n",
       "      <td>1850.0</td>\n",
       "      <td>8219.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>4140900050</td>\n",
       "      <td>20150126T000000</td>\n",
       "      <td>440000.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.75</td>\n",
       "      <td>2180.0</td>\n",
       "      <td>10200</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>2000</td>\n",
       "      <td>180</td>\n",
       "      <td>1966</td>\n",
       "      <td>0</td>\n",
       "      <td>98028</td>\n",
       "      <td>47.7638</td>\n",
       "      <td>-122.270</td>\n",
       "      <td>2590.0</td>\n",
       "      <td>10445.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           id             date     price  bedrooms  bathrooms  sqft_living  \\\n",
       "0  2780400035  20140505T000000  665000.0       4.0       2.50       2800.0   \n",
       "1  1703050500  20150321T000000  645000.0       3.0       2.50       2490.0   \n",
       "2  5700002325  20140605T000000  640000.0       3.0       1.75       2340.0   \n",
       "3  0475000510  20141118T000000  594000.0       3.0       1.00       1320.0   \n",
       "4  0844001052  20150128T000000  365000.0       4.0       2.50       1904.0   \n",
       "5  2781280290  20150427T000000  305000.0       3.0       2.50       1610.0   \n",
       "6  2214800630  20141105T000000  239950.0       3.0       2.25       1560.0   \n",
       "7  2114700540  20141021T000000  366000.0       3.0       2.50       1320.0   \n",
       "8  2596400050  20140730T000000  375000.0       3.0       1.00       1960.0   \n",
       "9  4140900050  20150126T000000  440000.0       4.0       1.75       2180.0   \n",
       "\n",
       "   sqft_lot  floors  waterfront  view     ...      grade  sqft_above  \\\n",
       "0      5900     1.0           0     0     ...          8        1660   \n",
       "1      5978     2.0           0     0     ...          9        2490   \n",
       "2      4206     1.0           0     0     ...          7        1170   \n",
       "3      5000     1.0           0     0     ...          7        1090   \n",
       "4      8200     2.0           0     0     ...          7        1904   \n",
       "5      3516     2.0           0     0     ...          8        1610   \n",
       "6      8280     2.0           0     0     ...          7        1560   \n",
       "7      4320     1.0           0     0     ...          6         660   \n",
       "8      7955     1.0           0     0     ...          7        1260   \n",
       "9     10200     1.0           0     2     ...          8        2000   \n",
       "\n",
       "   sqft_basement  yr_built  yr_renovated  zipcode      lat     long  \\\n",
       "0           1140      1963             0    98115  47.6809 -122.286   \n",
       "1              0      2003             0    98074  47.6298 -122.022   \n",
       "2           1170      1917             0    98144  47.5759 -122.288   \n",
       "3            230      1920             0    98107  47.6674 -122.365   \n",
       "4              0      1999             0    98010  47.3107 -122.001   \n",
       "5              0      2006             0    98055  47.4491 -122.188   \n",
       "6              0      1979             0    98001  47.3393 -122.259   \n",
       "7            660      1918             0    98106  47.5327 -122.347   \n",
       "8            700      1963             0    98177  47.7641 -122.364   \n",
       "9            180      1966             0    98028  47.7638 -122.270   \n",
       "\n",
       "   sqft_living15  sqft_lot15  \n",
       "0         2580.0      5900.0  \n",
       "1         2710.0      6629.0  \n",
       "2         1360.0      4725.0  \n",
       "3         1700.0      5000.0  \n",
       "4         1560.0     12426.0  \n",
       "5         1610.0      3056.0  \n",
       "6         1920.0      8120.0  \n",
       "7         1190.0      4200.0  \n",
       "8         1850.0      8219.0  \n",
       "9         2590.0     10445.0  \n",
       "\n",
       "[10 rows x 21 columns]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_valid_shuffled[0:10] # rows 0 to 9"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the observations are grouped into 10 segments, the segment i is given by\n",
    "```python\n",
    "print(n, i)\n",
    "start = (n*i)/10\n",
    "end = (n*(i+1))/10\n",
    "train_valid_shuffled[start:end+1]\n",
    "```\n",
    "\n",
    "Meanwhile, to choose the remainder of the data that's not part of the segment i, we select two slices (0:start) and (end+1:n) and paste them together.\n",
    "```python\n",
    "train_valid_shuffled[0:start].append(train_valid_shuffled[end+1:n])\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let us extract individual segments with array slicing. Consider the scenario where we group the houses in the `train_valid_shuffled` dataframe into k=10 segments of roughly equal size, with starting and ending indices computed as above.\n",
    "Extract the fourth segment (segment 3) and assign it to a variable called `validation4`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1941, 21)"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "i= 4\n",
    "start = (n*i)/10\n",
    "end = (n*(i+1))/10\n",
    "\n",
    "validation4 = train_valid_shuffled[start:end+1]\n",
    "validation4.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To verify that we have the right elements extracted, run the following cell, which computes the average price of the fourth segment. When rounded to nearest whole number, the average should be $536,234."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "544615\n"
     ]
    }
   ],
   "source": [
    "print int(round(validation4['price'].mean(), 0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After designating one of the k segments as the validation set, we train a model using the rest of the data. To choose the remainder, we slice (0:start) and (end+1:n) of the data and paste them together. SFrame has `append()` method that pastes together two disjoint sets of rows originating from a common dataset. For instance, the following cell pastes together the first and last two rows of the `train_valid_shuffled` dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>price</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>sqft_living</th>\n",
       "      <th>sqft_lot</th>\n",
       "      <th>floors</th>\n",
       "      <th>waterfront</th>\n",
       "      <th>view</th>\n",
       "      <th>...</th>\n",
       "      <th>grade</th>\n",
       "      <th>sqft_above</th>\n",
       "      <th>sqft_basement</th>\n",
       "      <th>yr_built</th>\n",
       "      <th>yr_renovated</th>\n",
       "      <th>zipcode</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>sqft_living15</th>\n",
       "      <th>sqft_lot15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2780400035</td>\n",
       "      <td>20140505T000000</td>\n",
       "      <td>665000.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.50</td>\n",
       "      <td>2800.0</td>\n",
       "      <td>5900</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>1660</td>\n",
       "      <td>1140</td>\n",
       "      <td>1963</td>\n",
       "      <td>0</td>\n",
       "      <td>98115</td>\n",
       "      <td>47.6809</td>\n",
       "      <td>-122.286</td>\n",
       "      <td>2580.0</td>\n",
       "      <td>5900.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1703050500</td>\n",
       "      <td>20150321T000000</td>\n",
       "      <td>645000.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.50</td>\n",
       "      <td>2490.0</td>\n",
       "      <td>5978</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>2490</td>\n",
       "      <td>0</td>\n",
       "      <td>2003</td>\n",
       "      <td>0</td>\n",
       "      <td>98074</td>\n",
       "      <td>47.6298</td>\n",
       "      <td>-122.022</td>\n",
       "      <td>2710.0</td>\n",
       "      <td>6629.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19394</th>\n",
       "      <td>4139480190</td>\n",
       "      <td>20140916T000000</td>\n",
       "      <td>1153000.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.25</td>\n",
       "      <td>3780.0</td>\n",
       "      <td>10623</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>11</td>\n",
       "      <td>2650</td>\n",
       "      <td>1130</td>\n",
       "      <td>1999</td>\n",
       "      <td>0</td>\n",
       "      <td>98006</td>\n",
       "      <td>47.5506</td>\n",
       "      <td>-122.101</td>\n",
       "      <td>3850.0</td>\n",
       "      <td>11170.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19395</th>\n",
       "      <td>7237300290</td>\n",
       "      <td>20150326T000000</td>\n",
       "      <td>338000.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.50</td>\n",
       "      <td>2400.0</td>\n",
       "      <td>4496</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>2400</td>\n",
       "      <td>0</td>\n",
       "      <td>2004</td>\n",
       "      <td>0</td>\n",
       "      <td>98042</td>\n",
       "      <td>47.3692</td>\n",
       "      <td>-122.126</td>\n",
       "      <td>1880.0</td>\n",
       "      <td>4319.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               id             date      price  bedrooms  bathrooms  \\\n",
       "0      2780400035  20140505T000000   665000.0       4.0       2.50   \n",
       "1      1703050500  20150321T000000   645000.0       3.0       2.50   \n",
       "19394  4139480190  20140916T000000  1153000.0       3.0       3.25   \n",
       "19395  7237300290  20150326T000000   338000.0       5.0       2.50   \n",
       "\n",
       "       sqft_living  sqft_lot  floors  waterfront  view     ...      grade  \\\n",
       "0           2800.0      5900     1.0           0     0     ...          8   \n",
       "1           2490.0      5978     2.0           0     0     ...          9   \n",
       "19394       3780.0     10623     1.0           0     1     ...         11   \n",
       "19395       2400.0      4496     2.0           0     0     ...          7   \n",
       "\n",
       "       sqft_above  sqft_basement  yr_built  yr_renovated  zipcode      lat  \\\n",
       "0            1660           1140      1963             0    98115  47.6809   \n",
       "1            2490              0      2003             0    98074  47.6298   \n",
       "19394        2650           1130      1999             0    98006  47.5506   \n",
       "19395        2400              0      2004             0    98042  47.3692   \n",
       "\n",
       "          long  sqft_living15  sqft_lot15  \n",
       "0     -122.286         2580.0      5900.0  \n",
       "1     -122.022         2710.0      6629.0  \n",
       "19394 -122.101         3850.0     11170.0  \n",
       "19395 -122.126         1880.0      4319.0  \n",
       "\n",
       "[4 rows x 21 columns]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n = len(train_valid_shuffled)\n",
    "first_two = train_valid_shuffled[0:2]\n",
    "last_two = train_valid_shuffled[n-2:n]\n",
    "first_two.append(last_two)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Extract the remainder of the data after *excluding* fourth segment (segment 3) and assign the subset to `train4`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "train4 = train_valid_shuffled[:start].append(train_valid_shuffled[end:])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To verify that we have the right elements extracted, run the following cell, which computes the average price of the data with fourth segment excluded. When rounded to nearest whole number, the average should be $539,450."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "538503\n"
     ]
    }
   ],
   "source": [
    "print int(round(train4['price'].mean(), 0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Now we are ready to implement k-fold cross-validation. \n",
    " * Write a function that computes k validation errors by designating each of the k segments as the validation set. It accepts as parameters (i) `k`, (ii) `l2_penalty`, (iii) dataframe containing input features (e.g. poly15_data) and (iv) column of output values (e.g. price). \n",
    " * The function returns the average validation error using k segments as validation sets. We shall assume that the input dataframe does not contain the output column.\n",
    "\n",
    "* For each i in [0, 1, ..., k-1]:\n",
    "  * Compute starting and ending indices of segment i and call 'start' and 'end'\n",
    "  * Form validation set by taking a slice (start:end+1) from the data.\n",
    "  * Form training set by appending slice (end+1:n) to the end of slice (0:start).\n",
    "  * Train a linear model using training set just formed, with a given l2_penalty\n",
    "  * Compute validation error using validation set just formed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def k_fold_cross_validation(k, l2_penalty, data, output):\n",
    "    n = len(data)\n",
    "    \n",
    "    ridge = Ridge( alpha = l2_penalty, normalize=True)\n",
    "    val_err =[]\n",
    "    \n",
    "    for i in range(k):\n",
    "        start = n*i/k\n",
    "        end   = (n*(i+1))/k -1\n",
    "        #print i, (start, end)\n",
    "        X_valid, X_train  = data[start:end],data[0:start].append(data[end:n])\n",
    "        y_valid, y_train  = output[start:end], output[0:start].append(output[end:n]) \n",
    "        \n",
    "        model = ridge.fit(X_train, y_train)\n",
    "        res = y_valid - model.predict(X_valid)\n",
    "        RSS = np.dot(res,res )\n",
    "        val_err.append(RSS)\n",
    "    \n",
    "    avg_val_error = np.mean(val_err)\n",
    "    \n",
    "    return avg_val_error \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once we have a function to compute the average validation error for a model, we can write a loop to find the model that minimizes the average validation error. Write a loop that does the following:\n",
    "1. We will again be aiming to fit a 15th-order polynomial model using the `sqft_living` input\n",
    "* For `l2_penalty` in [10^3, 10^3.5, 10^4, 10^4.5, ..., 10^9] (to get this in Python, you can use this Numpy function: `np.logspace(3, 9, num=13)`.)\n",
    "    * Run 10-fold cross-validation with `l2_penalty`\n",
    "* Report which L2 penalty produced the lowest average validation error.\n",
    "\n",
    "Note: since the degree of the polynomial is now fixed to 15, to make things faster, you should generate polynomial features in advance and re-use them throughout the loop. Make sure to use `train_valid_shuffled` when generating polynomial features!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "l2_penalty_list= np.logspace(3, 9, num=13)\n",
    "\n",
    "X =  polynomial_sframe(train_valid_shuffled['sqft_living'], 15)\n",
    "y = train_valid_shuffled['price']\n",
    "\n",
    "avg_val_error = []\n",
    "for p in l2_penalty_list:\n",
    "    err=  k_fold_cross_validation( 10,p , X, y) \n",
    "    avg_val_error.append(err)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***QUIZ QUESTIONS:  What is the best value for the L2 penalty according to 10-fold validation?***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You may find it useful to plot the k-fold cross-validation errors you have obtained to better understand the behavior of the method.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nDuMW1z2r1r4AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10f69d790>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the l2_penalty values in the x axis and the cross-validation error in the y axis.\n",
    "# Using plt.xscale('log') will make your plot more intuitive.\n",
    "\n",
    "plt.plot( l2_penalty_list, avg_val_error)\n",
    "plt.title(str(k)+'-fold cross validation error vs. $\\ell_2$ penalty')\n",
    "plt.xlabel('$\\ell_2$ penalty')\n",
    "#plt.ylabel(str(k)+'-fold cross validation error')\n",
    "plt.xscale('log')\n",
    "plt.yscale('log')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once you found the best value for the L2 penalty using cross-validation, it is important to retrain a final model on all of the training data using this value of `l2_penalty`. This way, your final model will be trained on the entire dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "265819630802601.5"
      ]
     },
     "execution_count": 264,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "k_fold_cross_validation(10, l2_penalty_list[10], X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***QUIZ QUESTION: Using the best L2 penalty found above, train a model using all training data. What is the RSS on the TEST data of the model you learn with this L2 penalty? ***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ridge = Ridge( alpha = 1000, normalize=True)\n",
    "X_train = polynomial_sframe(train_data['sqft_living'], 15) \n",
    "X_test = polynomial_sframe(test_data['sqft_living'], 15) \n",
    "y_train = train_data['price']\n",
    "y_test = test_data['price']\n",
    "\n",
    "model = ridge.fit(X_train, y_train)\n",
    "res = y_test- model.predict(X_test)\n",
    "RSS = np.dot(res,res )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "283706518061282.5"
      ]
     },
     "execution_count": 266,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RSS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
